import asyncpg
import time
import asyncio
from typing import Dict, Any, Optional, List, Tuple
from config import DB_HOST, DB_PORT, DB_NAME, DB_USER, DB_PASS
import psycopg2
from psycopg2.extras import RealDictCursor

class DBService:
    def __init__(self):
        self.pool = None
        self.conn_params = {
            "host": DB_HOST,
            "port": DB_PORT,
            "database": DB_NAME,
            "user": DB_USER,
            "password": DB_PASS
        }
        self.sync_connection = None
        
        print(f"üõ¢Ô∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è DBService —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:")
        print(f"üõ¢Ô∏è - –•–æ—Å—Ç: {DB_HOST}, –ü–æ—Ä—Ç: {DB_PORT}")
        print(f"üõ¢Ô∏è - –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {DB_NAME}, –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {DB_USER}")
        

    async def get_pool(self):
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç –ø—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π"""
        if self.pool is None:
            print(f"üîÑ –°–æ–∑–¥–∞–Ω–∏–µ –ø—É–ª–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –∫ PostgreSQL ({DB_HOST}:{DB_PORT})...")
            max_attempts = 3
            for attempt in range(max_attempts):
                try:
                    start_time = time.time()
                    self.pool = await asyncpg.create_pool(
                        host=DB_HOST,
                        port=DB_PORT,
                        database=DB_NAME,
                        user=DB_USER,
                        password=DB_PASS,
                        timeout=10.0,
                        min_size=2, 
                        max_size=10
                    )
                    elapsed_time = time.time() - start_time
                    print(f"‚úÖ –ü—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π PostgreSQL —Å–æ–∑–¥–∞–Ω –∑–∞ {elapsed_time:.2f} —Å–µ–∫")
                    break
                except asyncpg.exceptions.PostgresError as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ PostgreSQL –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—É–ª–∞ (–ø–æ–ø—ã—Ç–∫–∞ {attempt+1}/{max_attempts}): {e}")
                    if attempt < max_attempts - 1:
                        delay = 2 * (attempt + 1)
                        print(f"‚è±Ô∏è –ñ–¥–µ–º {delay} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π...")
                        await asyncio.sleep(delay)
                except Exception as e:
                    print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—É–ª–∞ (–ø–æ–ø—ã—Ç–∫–∞ {attempt+1}/{max_attempts}): {e}")
                    import traceback
                    print(f"–°—Ç–µ–∫ –æ—à–∏–±–∫–∏:\n{traceback.format_exc()}")
                    if attempt < max_attempts - 1:
                        delay = 2 * (attempt + 1)
                        print(f"‚è±Ô∏è –ñ–¥–µ–º {delay} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π...")
                        await asyncio.sleep(delay)
            
            if self.pool is None:
                print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –∫ PostgreSQL –ø–æ—Å–ª–µ {max_attempts} –ø–æ–ø—ã—Ç–æ–∫")
                print(f"‚ö†Ô∏è –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –≤ —Ñ–∞–π–ª–µ .env –∏–ª–∏ config.py")
        
        return self.pool


    def connect(self):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î."""
        if self.sync_connection is None or self.sync_connection.closed:
            try:
                print(f"üîÑ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ PostgreSQL ({DB_HOST}:{DB_PORT})...")
                start_time = time.time()
                self.sync_connection = psycopg2.connect(**self.conn_params)
                elapsed_time = time.time() - start_time
                print(f"‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å PostgreSQL —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∑–∞ {elapsed_time:.2f} —Å–µ–∫")
            except psycopg2.OperationalError as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL: {e}")
                raise
        return self.sync_connection

    def close(self):
        """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î."""
        if self.sync_connection and not self.sync_connection.closed:
            print(f"üîÑ –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å PostgreSQL...")
            self.sync_connection.close()
            print(f"‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ")


    async def get_historical_summary(self, session_id: str, interlocutor_id: int) -> Optional[str]:
        """
        –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –ø–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–µ —Å–∞–º–º–µ—Ä–∏ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞
        """
        print(f"üîÑ –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–≥–æ —Å–∞–º–º–µ—Ä–∏ –¥–ª—è —Å–µ—Å—Å–∏–∏ {session_id}, —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ {interlocutor_id}...")
        try:
            pool = await self.get_pool()
            if pool is None:
                print(f"‚ö†Ô∏è –ü—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –Ω–µ —Å–æ–∑–¥–∞–Ω, –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–µ —Å–∞–º–º–µ—Ä–∏")
                return None
                
            async with pool.acquire() as conn:
                print(f"üîÑ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –∫ –ë–î –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∞–º–º–µ—Ä–∏...")
                row = await conn.fetchrow("""
                    SELECT summary 
                    FROM historical_summaries 
                    WHERE session_id = $1 AND interlocutor_id = $2
                    ORDER BY ts DESC 
                    LIMIT 1
                """, session_id, interlocutor_id)
                
                if row:
                    summary = row['summary']
                    summary_preview = summary[:100] + "..." if len(summary) > 100 else summary
                    print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–µ —Å–∞–º–º–µ—Ä–∏, –¥–ª–∏–Ω–∞: {len(summary)} —Å–∏–º–≤–æ–ª–æ–≤")
                    print(f"üìù –ù–∞—á–∞–ª–æ —Å–∞–º–º–µ—Ä–∏: {summary_preview}")
                    return summary
                else:
                    print(f"‚ÑπÔ∏è –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–µ —Å–∞–º–º–µ—Ä–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è —Å–µ—Å—Å–∏–∏ {session_id}, —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ {interlocutor_id}")
                    return None
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–≥–æ —Å–∞–º–º–µ—Ä–∏: {e}")
            import traceback
            print(f"–°—Ç–µ–∫ –æ—à–∏–±–∫–∏:\n{traceback.format_exc()}")
            return None

    async def save_historical_summary(self, session_id: str, interlocutor_id: int, summary: str) -> bool:
        """
        –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–æ–≤–æ–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–µ —Å–∞–º–º–µ—Ä–∏ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞
        """
        pool = await self.get_pool()
        async with pool.acquire() as conn:
            await conn.execute("""
                INSERT INTO historical_summaries (session_id, interlocutor_id, summary) 
                VALUES ($1, $2, $3)
            """, session_id, interlocutor_id, summary)
            return True

    async def save_chat_metrics(self, 
                             session_id: str, 
                             telegram_user_id: int, 
                             interlocutor_id: int,
                             role: str,
                             compliments_delta: int,
                             total_compliments: int, 
                             engagement_score: float,
                             attachment_type: str,
                             attachment_confidence: float) -> bool:
        """
        –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ —á–∞—Ç–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        """
        pool = await self.get_pool()
        async with pool.acquire() as conn:
            await conn.execute("""
                INSERT INTO chat_metrics_history (
                    session_id, 
                    telegram_user_id, 
                    interlocutor_id, 
                    role,
                    compliments_delta, 
                    total_compliments, 
                    engagement_score,
                    attachment_type,
                    attachment_confidence
                ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9)
            """, 
                session_id, 
                telegram_user_id, 
                interlocutor_id, 
                role,
                compliments_delta, 
                total_compliments, 
                engagement_score,
                attachment_type,
                attachment_confidence
            )
            return True

    async def get_latest_metrics(self, session_id: str, interlocutor_id: int, role: str) -> Optional[Dict[str, Any]]:
        """
        –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –ø–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –¥–∏–∞–ª–æ–≥–∞
        """
        pool = await self.get_pool()
        async with pool.acquire() as conn:
            row = await conn.fetchrow("""
                SELECT 
                    total_compliments, 
                    engagement_score,
                    attachment_type,
                    attachment_confidence
                FROM chat_metrics_history 
                WHERE session_id = $1 AND interlocutor_id = $2 AND role = $3
                ORDER BY ts DESC 
                LIMIT 1
            """, session_id, interlocutor_id, role)
            
            if row:
                return {
                    'total_compliments': row['total_compliments'],
                    'engagement_score': row['engagement_score'],
                    'attachment_type': row['attachment_type'],
                    'attachment_confidence': row['attachment_confidence']
                }
            return None
            

    def get_historical_summary_sync(self, session_id: str, interlocutor_id: int) -> Optional[str]:
        conn = self.connect()
        try:
            with conn.cursor(cursor_factory=RealDictCursor) as cur:
                cur.execute("""
                    SELECT summary 
                    FROM historical_summaries 
                    WHERE session_id = %s AND interlocutor_id = %s
                    ORDER BY ts DESC 
                    LIMIT 1
                """, (session_id, interlocutor_id))
                
                result = cur.fetchone()
                return result['summary'] if result else None
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–≥–æ —Å–∞–º–º–µ—Ä–∏: {e}")
            return None

    def save_historical_summary_sync(self, session_id: str, interlocutor_id: int, summary: str) -> bool:
        conn = self.connect()
        try:
            with conn.cursor() as cur:
                cur.execute("""
                    INSERT INTO historical_summaries (session_id, interlocutor_id, summary) 
                    VALUES (%s, %s, %s)
                """, (session_id, interlocutor_id, summary))
                conn.commit()
                return True
        except Exception as e:
            conn.rollback()
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–≥–æ —Å–∞–º–º–µ—Ä–∏: {e}")
            return False

    def save_chat_metrics_sync(self, 
                             session_id: str, 
                             telegram_user_id: int, 
                             interlocutor_id: int,
                             role: str,
                             compliments_delta: int,
                             total_compliments: int, 
                             engagement_score: float,
                             attachment_type: str,
                             attachment_confidence: float) -> bool:
        conn = self.connect()
        try:
            with conn.cursor() as cur:
                cur.execute("""
                    INSERT INTO chat_metrics_history (
                        session_id, 
                        telegram_user_id, 
                        interlocutor_id, 
                        role,
                        compliments_delta, 
                        total_compliments, 
                        engagement_score,
                        attachment_type,
                        attachment_confidence
                    ) VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s)
                """, (
                    session_id, 
                    telegram_user_id, 
                    interlocutor_id, 
                    role,
                    compliments_delta, 
                    total_compliments, 
                    engagement_score,
                    attachment_type,
                    attachment_confidence
                ))
                conn.commit()
                return True
        except Exception as e:
            conn.rollback()
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –º–µ—Ç—Ä–∏–∫ —á–∞—Ç–∞: {e}")
            return False

    def get_latest_metrics_sync(self, session_id: str, interlocutor_id: int, role: str) -> Optional[Dict[str, Any]]:
        conn = self.connect()
        try:
            with conn.cursor(cursor_factory=RealDictCursor) as cur:
                cur.execute("""
                    SELECT 
                        total_compliments, 
                        engagement_score,
                        attachment_type,
                        attachment_confidence
                    FROM chat_metrics_history 
                    WHERE session_id = %s AND interlocutor_id = %s AND role = %s
                    ORDER BY ts DESC 
                    LIMIT 1
                """, (session_id, interlocutor_id, role))
                
                return cur.fetchone()
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –º–µ—Ç—Ä–∏–∫: {e}")
            return None

    async def save_user_recommendation(
        self,
        session_id: str,
        telegram_user_id: int,
        interlocutor_id: int,
        recommendation_text: str
    ) -> bool:
        """
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –ø–æ –æ–±—â–µ–Ω–∏—é –≤ –ë–î
        
        Args:
            session_id: ID —Å–µ—Å—Å–∏–∏
            telegram_user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç–µ–ª–µ–≥—Ä–∞–º
            interlocutor_id: ID —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞
            recommendation_text: –¢–µ–∫—Å—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            
        Returns:
            True –≤ —Å–ª—É—á–∞–µ —É—Å–ø–µ—Ö–∞, False –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        try:
            conn = await self.get_pool()
            async with conn.acquire() as conn:
                await conn.execute(
                    """
                    INSERT INTO telegram_user_recommendations
                    (session_id, telegram_user_id, interlocutor_id, recommendation_text)
                    VALUES ($1, $2, $3, $4)
                    """,
                    session_id, telegram_user_id, interlocutor_id, recommendation_text
                )
            print(f"‚úÖ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_user_id} —Å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–º {interlocutor_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –ë–î")
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –≤ –ë–î: {e}")
            import traceback
            print(f"–°—Ç–µ–∫ –æ—à–∏–±–∫–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:\n{traceback.format_exc()}")
            return False


db_service = DBService() 