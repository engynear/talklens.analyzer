import json
import re
import time
from typing import List, Dict, Any, Optional
from yandex_cloud_ml_sdk import YCloudML

from .llm_interface import LLMInterface
from .prompts import (
    compliments_prompt,
    engagement_prompt,
    attachment_prompt,
    recommendations_prompt,
    summary_prompt,
    legacy_analysis_prompt
)
from .yandex_prompts import (
    compliments_messages,
    engagement_messages,
    attachment_messages,
    recommendations_messages,
    summary_messages,
    legacy_analysis_messages
)

class ApiLLM(LLMInterface):
    def __init__(self, api_url: str = None, api_key: str = None, folder_id: str = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å YandexGPT API
        
        Args:
            api_url: –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è YandexGPT, –æ—Å—Ç–∞–≤–ª–µ–Ω –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            api_key: API –∫–ª—é—á –¥–ª—è YandexGPT
            folder_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–∞—Ç–∞–ª–æ–≥–∞ Yandex Cloud
        """
        self.api_url = api_url
        self.api_key = api_key
        self.folder_id = folder_id
        self.sdk = None
        
        print("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è API-–∫–ª–∏–µ–Ω—Ç–∞ –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ—Ç–∏")
        
        if folder_id and api_key:
            try:
                print(f"üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è YCloudML SDK —Å folder_id={folder_id[:5]}...")
                self.sdk = YCloudML(
                    folder_id=folder_id,
                    auth=api_key
                )
                print(f"‚úÖ YCloudML SDK –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ YCloudML SDK: {e}")
                import traceback
                print(f"–°—Ç–µ–∫ –æ—à–∏–±–∫–∏:\n{traceback.format_exc()}")
        elif api_url:
            print(f"üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –æ–±—ã—á–Ω—ã–π API URL: {api_url}")
        else:
            print("‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: API –Ω–µ —Å–∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä–æ–≤–∞–Ω –¥–æ–ª–∂–Ω—ã–º –æ–±—Ä–∞–∑–æ–º")

    def _format_messages(self, messages: List[Dict[str, Any]]) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ç–µ–∫—Å—Ç –¥–ª—è —á–∞—Ç–∞
        
        Args:
            messages: –°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            
        Returns:
            –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —á–∞—Ç–∞
        """
        print(f"üîÑ –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ç–µ–∫—Å—Ç")
        return "\n".join([f"{m['SenderId']}: {m['MessageText']}" for m in messages])

    def _make_request(self, messages: List[Dict[str, str]], max_retries: int = 3) -> str:
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ YandexGPT API
        
        Args:
            messages: –°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ YandexGPT
            max_retries: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
            
        Returns:
            –¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç API
        """
        if not self.sdk and not self.api_url:
            print("‚ùå SDK –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∏ API URL –Ω–µ —É–∫–∞–∑–∞–Ω")
            return ""
        
        print(f"üìù –ó–∞–ø—Ä–æ—Å —Å–æ–¥–µ—Ä–∂–∏—Ç {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π")
        if len(messages) > 0:
            print(f"üìù –†–æ–ª—å –ø–µ—Ä–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {messages[0].get('role', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
            print(f"üìù –ü–µ—Ä–≤—ã–µ 50 —Å–∏–º–≤–æ–ª–æ–≤: {messages[0].get('text', '')[:50]}...")
            
        for attempt in range(max_retries):
            try:
                print(f"üîÑ –ü–æ–ø—ã—Ç–∫–∞ #{attempt + 1} –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –∫ API")
                start_time = time.time()
                
                if self.sdk:
                    print("üîÑ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —á–µ—Ä–µ–∑ YCloudML SDK...")
                    result = self.sdk.models.completions("yandexgpt").configure(temperature=0.0).run(messages)
                    
                    if hasattr(result, '__iter__'):
                        print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω –∏—Ç–µ—Ä–∏—Ä—É–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç, —Ç–∏–ø: {type(result)}")
                        for alternative in result:
                            if hasattr(alternative, 'text'):
                                elapsed_time = time.time() - start_time
                                text = alternative.text.strip()
                                print(f"üß† Yandex GPT –æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω –∑–∞ {elapsed_time:.2f} —Å–µ–∫., –¥–ª–∏–Ω–∞: {len(text)} —Å–∏–º–≤–æ–ª–æ–≤")
                                if text:
                                    print(f"üß† –ü–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤ –æ—Ç–≤–µ—Ç–∞: {text[:200]}...")
                                return text
                            else:
                                print(f"‚ö†Ô∏è –û–±—ä–µ–∫—Ç Alternative –Ω–µ –∏–º–µ–µ—Ç –∞—Ç—Ä–∏–±—É—Ç–∞ text: {alternative}")
                    else:
                        print(f"‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ç–∏–ø —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {type(result)}")
                    
                    print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –∏–∑ –æ—Ç–≤–µ—Ç–∞")
                    return ""
                
                else:
                    try:
                        import requests
                        print("üîÑ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —á–µ—Ä–µ–∑ HTTP API...")
                        headers = {
                            "Authorization": f"Bearer {self.api_key}",
                            "Content-Type": "application/json"
                        }
                        
                        data = {
                            "messages": messages,
                            "temperature": 0.0
                        }
                        
                        response = requests.post(self.api_url, headers=headers, json=data)
                        response.raise_for_status()
                        
                        result = response.json()
                        elapsed_time = time.time() - start_time
                        print(f"‚úÖ –û—Ç–≤–µ—Ç –æ—Ç HTTP API –ø–æ–ª—É—á–µ–Ω –∑–∞ {elapsed_time:.2f} —Å–µ–∫.")
                        
                        if "choices" in result and len(result["choices"]) > 0:
                            text = result["choices"][0].get("message", {}).get("content", "").strip()
                            print(f"üß† API –æ—Ç–≤–µ—Ç, –¥–ª–∏–Ω–∞: {len(text)} —Å–∏–º–≤–æ–ª–æ–≤")
                            if text:
                                print(f"üß† –ü–µ—Ä–≤—ã–µ 100 —Å–∏–º–≤–æ–ª–æ–≤ –æ—Ç–≤–µ—Ç–∞: {text[:100]}...")
                            return text
                        else:
                            print(f"‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ API: {result}")
                            return ""
                    except requests.exceptions.ConnectionError as e:
                        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API: {e}")
                        import traceback
                        print(f"–°—Ç–µ–∫ –æ—à–∏–±–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:\n{traceback.format_exc()}")
                        time.sleep(2)
                    
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ API –∑–∞–ø—Ä–æ—Å–∞ (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries}): {e}")
                import traceback
                print(f"–°—Ç–µ–∫ –æ—à–∏–±–∫–∏:\n{traceback.format_exc()}")
                if attempt == max_retries - 1:
                    return ""
                time.sleep(1 + attempt)
                
        return ""

    def _clean_markdown(self, text: str) -> str:
        """
        –û—á–∏—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –æ—Ç Markdown-—Ä–∞–∑–º–µ—Ç–∫–∏ –∫–æ–¥–∞
        
        Args:
            text: –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç —Å Markdown
            
        Returns:
            –û—á–∏—â–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        """

        cleaned_text = re.sub(r'```(?:json|)\n?(.*?)\n?```', r'\1', text, flags=re.DOTALL)
        

        cleaned_text = re.sub(r'`(.*?)`', r'\1', cleaned_text)
        
        print(f"üßπ –¢–µ–∫—Å—Ç –æ—á–∏—â–µ–Ω –æ—Ç Markdown: –±—ã–ª–æ {len(text)} —Å–∏–º–≤–æ–ª–æ–≤, —Å—Ç–∞–ª–æ {len(cleaned_text)}")
        
        return cleaned_text
    
    def _extract_json(self, text: str) -> Optional[Dict[str, Any]]:
        """
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç JSON –∏–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –º–æ–¥–µ–ª–∏ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
        
        Args:
            text: –¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
            
        Returns:
            –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π JSON –æ–±—ä–µ–∫—Ç –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        """
        if not text:
            print("‚ùå –ü—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è JSON")
            return None
            

        max_fix_attempts = 3
            
        try:

            cleaned_text = self._clean_markdown(text)
            print(f"üîç –ò—â–µ–º JSON –≤ —Ç–µ–∫—Å—Ç–µ: {cleaned_text[:100]}...")
            

            try:
                result = json.loads(cleaned_text)
                print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω JSON")
                

                fixed_result = {}
                for key, value in result.items():

                    if 'SenderId' in key or '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å' in key or 'user' in key:
                        print(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID: {key}")
                        continue
                    

                    new_key = str(key) if key is not None else ""
                    

                    if value is not None:
                        fixed_result[new_key] = value
                
                if fixed_result:
                    print(f"‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–ª—é—á–µ–π —É—Å–ø–µ—à–Ω–∞: {fixed_result}")
                    return fixed_result
                else:
                    print("‚ö†Ô∏è –ü–æ—Å–ª–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–ª—é—á–µ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—É—Å—Ç–æ–π")
            except json.JSONDecodeError as e:
                print(f"‚ÑπÔ∏è –ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–µ—Å—å —Ç–µ–∫—Å—Ç –∫–∞–∫ JSON: {e}")
                

            print("üîÑ –ò—â–µ–º JSON –≤ —Ç–µ–∫—Å—Ç–µ —Å –ø–æ–º–æ—â—å—é —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –≤—ã—Ä–∞–∂–µ–Ω–∏—è...")
            json_matches = re.findall(r'{[\s\S]*?}', cleaned_text)
            if json_matches:
                for json_text in json_matches:
                    for attempt in range(max_fix_attempts):
                        try:
                            result = json.loads(json_text)
                            print(f"‚úÖ –ù–∞–π–¥–µ–Ω –≤–∞–ª–∏–¥–Ω—ã–π JSON: {result}")
                            

                            fixed_result = {}
                            for key, value in result.items():

                                if 'SenderId' in key or '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å' in key or 'user' in key:
                                    print(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID: {key}")
                                    continue
                                

                                new_key = str(key) if key is not None else ""
                                

                                if value is not None:
                                    fixed_result[new_key] = value
                            
                            if fixed_result:
                                print(f"‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–ª—é—á–µ–π —É—Å–ø–µ—à–Ω–∞: {fixed_result}")
                                return fixed_result
                            else:
                                print("‚ö†Ô∏è –ü–æ—Å–ª–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–ª—é—á–µ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—É—Å—Ç–æ–π")
                                break
                            
                        except json.JSONDecodeError as e:
                            print(f"‚ùå –ù–∞–π–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º JSON: {e}")
                            if attempt < max_fix_attempts - 1:
                                print("üîÑ –ü–æ–ø—ã—Ç–∫–∞ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON...")
                                json_text = self._fix_json(json_text)
                            else:
                                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏—Å–ø—Ä–∞–≤–∏—Ç—å JSON: {e}")
                                break
                

            print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å JSON, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å")
            return {}
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ JSON: {e}")
            import traceback
            print(f"–°—Ç–µ–∫ –æ—à–∏–±–∫–∏ JSON-–∏–∑–≤–ª–µ—á–µ–Ω–∏—è:\n{traceback.format_exc()}")
            return {}
    
    def _fix_json(self, json_text: str) -> str:
        """
        –ü—ã—Ç–∞–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–∏—Ç—å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON
        
        Args:
            json_text: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON-—Ç–µ–∫—Å—Ç
            
        Returns:
            –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π JSON-—Ç–µ–∫—Å—Ç
        """

        fixed = re.sub(r"'([^']*)':", r'"\1":', json_text)
        

        fixed = re.sub(r':\s*"([^"]*)"([^,}])', r':"\1"\2', fixed)
        

        fixed = re.sub(r'([{,])\s*([a-zA-Z0-9_]+):', r'\1"\2":', fixed)
        
        return fixed
    
    def count_compliments(self, messages: List[Dict[str, Any]], max_retries: int = 3) -> Dict[str, Any]:
        """
        –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç–æ–≤ –≤ –¥–∏–∞–ª–æ–≥–µ
        
        Args:
            messages: –°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            max_retries: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
            
        Returns:
            Dict —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç–æ–≤ –∏–ª–∏ –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        """
        print(f"üîÑ –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–¥—Å—á–µ—Ç –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç–æ–≤ –¥–ª—è {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π")
        

        if not messages:
            print("‚ö†Ô∏è –ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç–æ–≤")
            return {}
            
        chat_text = self._format_messages(messages)
        yandex_messages = compliments_messages(chat_text)
        response = self._make_request(yandex_messages, max_retries)
        result = self._extract_json_with_retries(response, max_retries)
        print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–¥—Å—á–µ—Ç–∞ –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç–æ–≤: {result}")
        return result

    def calculate_engagement(
        self, 
        messages: List[Dict[str, Any]], 
        historical_summary: str,
        previous_engagement: dict = None,
        max_retries: int = 3
    ) -> Dict[str, Any]:
        """
        –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —É—Ä–æ–≤–µ–Ω—å –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        
        Args:
            messages: –°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            historical_summary: –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–µ —Å–∞–º–º–µ—Ä–∏
            previous_engagement: –ü—Ä–µ–¥—ã–¥—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤–æ–≤–ª–µ—á—ë–Ω–Ω–æ—Å—Ç–∏
            max_retries: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
            
        Returns:
            Dict —Å —É—Ä–æ–≤–Ω–µ–º –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç–∏ –∏–ª–∏ –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        """
        print(f"üîÑ –ó–∞–ø—Ä–æ—Å –Ω–∞ —Ä–∞—Å—á–µ—Ç —É—Ä–æ–≤–Ω—è –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç–∏ –¥–ª—è {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π")
        

        if not messages:
            print("‚ö†Ô∏è –ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç–∏")
            return {}
            
        chat_text = self._format_messages(messages)
        user_ids = list({str(m['SenderId']) for m in messages})
        yandex_messages = engagement_messages(chat_text, user_ids, historical_summary, previous_engagement)
        response = self._make_request(yandex_messages, max_retries)
        result = self._extract_json_with_retries(response, max_retries)
        print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å—á–µ—Ç–∞ –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç–∏: {result}")
        return result

    def calculate_attachment(
        self, 
        messages: List[Dict[str, Any]], 
        historical_summary: str,
        previous_attachments: dict = None,
        max_retries: int = 3
    ) -> Dict[str, Any]:
        """
        –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–æ—Å—Ç–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–∏–∞–ª–æ–≥–∞
        
        Args:
            messages: –°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            historical_summary: –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–µ —Å–∞–º–º–µ—Ä–∏
            previous_attachments: –ü—Ä–µ–¥—ã–¥—É—â–∏–µ –ø—Ä–æ–≥–Ω–æ–∑—ã –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–æ—Å—Ç–∏
            max_retries: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
            
        Returns:
            Dict —Å —Ç–∏–ø–æ–º –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–æ—Å—Ç–∏ –∏–ª–∏ –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        """
        print(f"üîÑ –ó–∞–ø—Ä–æ—Å –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–æ—Å—Ç–∏ –¥–ª—è {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π")
        

        if not messages:
            print("‚ö†Ô∏è –ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–æ—Å—Ç–∏")
            return {}
            
        chat_text = self._format_messages(messages)
        user_ids = list({str(m['SenderId']) for m in messages})
        yandex_messages = attachment_messages(chat_text, user_ids, historical_summary, previous_attachments)
        response = self._make_request(yandex_messages, max_retries)
        result = self._extract_json_with_retries(response, max_retries)
        print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–æ—Å—Ç–∏: {result}")
        return result

    def generate_recommendations(
        self, 
        messages: List[Dict[str, Any]], 
        historical_summary: str,
        user_id: str,
        max_retries: int = 3
    ) -> str:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Args:
            messages: –°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            historical_summary: –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–µ —Å–∞–º–º–µ—Ä–∏
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            max_retries: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
            
        Returns:
            –¢–µ–∫—Å—Ç —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏
        """
        print(f"üîÑ –ó–∞–ø—Ä–æ—Å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π")
        

        if not messages:
            print("‚ö†Ô∏è –ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π")
            return ""
            
        chat_text = self._format_messages(messages)
        yandex_messages = recommendations_messages(chat_text, historical_summary, user_id)
        
        for attempt in range(max_retries):
            try:
                response = self._make_request(yandex_messages, max_retries=1)
                

                if not response:
                    print(f"‚ö†Ô∏è –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π (–ø–æ–ø—ã—Ç–∫–∞ {attempt+1}/{max_retries})")
                    time.sleep(1 + attempt)
                    continue
                

                clean_response = self._clean_markdown(response)
                

                if self._contains_prohibited_content(clean_response):
                    print(f"‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –≤ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è—Ö (–ø–æ–ø—ã—Ç–∫–∞ {attempt+1}/{max_retries})")
                    

                    if attempt == max_retries - 1:
                        print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –±–µ–∑ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞")
                        return "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –¥–∏–∞–ª–æ–≥ –∏ –ø–æ–¥—É–º–∞–π—Ç–µ, –∫–∞–∫ –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—é."
                    

                    repair_prompt = f"""–î–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–±—â–µ–Ω–∏—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ –¥–∏–∞–ª–æ–≥–∞.

–î–∏–∞–ª–æ–≥:
{chat_text}

–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–µ —Å–∞–º–º–µ—Ä–∏:
{historical_summary}

–°–¢–†–û–ì–û –∑–∞–ø—Ä–µ—â–µ–Ω–æ –≤ —Ç–≤–æ–µ–º –æ—Ç–≤–µ—Ç–µ:
1. –õ—é–±—ã–µ —Å—Å—ã–ª–∫–∏, –æ—Å–æ–±–µ–Ω–Ω–æ –Ω–∞ ya.ru, yandex.ru, google.com –∏ –¥—Ä.
2. –§—Ä–∞–∑—ã —Ç–∏–ø–∞ "–ø–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –≤ –ø–æ–∏—Å–∫–µ", "–≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ –µ—Å—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è" –∏ –ø–æ–¥–æ–±–Ω—ã–µ
3. –£–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–∏—Å–∫–æ–≤—ã—Ö —Å–∏—Å—Ç–µ–º –∏–ª–∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞
4. –õ—é–±—ã–µ HTML –∏–ª–∏ Markdown —Å—Å—ã–ª–∫–∏
5. –£–ø–æ–º–∏–Ω–∞–Ω–∏–µ, —á—Ç–æ —Ç—ã –Ω–µ –º–æ–∂–µ—à—å –ø–æ–º–æ—á—å

–¢–≤–æ–π –ø—Ä–µ–¥—ã–¥—É—â–∏–π –æ—Ç–≤–µ—Ç —Å–æ–¥–µ—Ä–∂–∞–ª –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç (—Å—Å—ã–ª–∫–∏ –∏–ª–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–∏—Å–∫–∞).
–î–∞–π 3-5 –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö, –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π, –æ—Å–Ω–æ–≤–∞–Ω–Ω—ã—Ö –¢–û–õ–¨–ö–û –Ω–∞ —ç—Ç–æ–º –¥–∏–∞–ª–æ–≥–µ.
–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∫–æ—Ä–æ—Ç–∫–∏–º–∏, –ø–æ–Ω—è—Ç–Ω—ã–º–∏ –∏ –¥–µ–π—Å—Ç–≤–µ–Ω–Ω—ã–º–∏."""
                    
                    yandex_messages = [
                        {"role": "system", "text": "–¢—ã –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–æ–Ω–Ω—ã–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç, –¥–∞—é—â–∏–π –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã."},
                        {"role": "user", "text": repair_prompt}
                    ]
                    time.sleep(1 + attempt)
                    continue
                
                print(f"‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª–∏–Ω–æ–π {len(clean_response)} —Å–∏–º–≤–æ–ª–æ–≤")
                return clean_response
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π (–ø–æ–ø—ã—Ç–∫–∞ {attempt+1}/{max_retries}): {e}")
                import traceback
                print(f"–°—Ç–µ–∫ –æ—à–∏–±–∫–∏:\n{traceback.format_exc()}")
                
                if attempt == max_retries - 1:
                    print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫")
                    return ""
                
                time.sleep(1 + attempt)
        

        return ""

    def update_summary(
        self, 
        messages: List[Dict[str, Any]], 
        historical_summary: Optional[str] = None,
        max_retries: int = 3
    ) -> str:
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–µ —Å–∞–º–º–µ—Ä–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–æ–≤–æ–≥–æ –±–∞—Ç—á–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
        
        Args:
            messages: –°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            historical_summary: –ü—Ä–µ–¥—ã–¥—É—â–µ–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–µ —Å–∞–º–º–µ—Ä–∏ –¥–∏–∞–ª–æ–≥–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
            max_retries: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –∞–Ω–∞–ª–∏–∑–∞
            
        Returns:
            –°—Ç—Ä–æ–∫–∞ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º —Å–∞–º–º–µ—Ä–∏ –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        """
        chat_text = self._format_messages(messages)
        yandex_messages = summary_messages(chat_text, historical_summary)
        response = self._make_request(yandex_messages, max_retries)
        return response

    def get_llm_response(self, prompt: str, max_retries: int = 3) -> str:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –æ—Ç–≤–µ—Ç –æ—Ç LLM –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ—Å—Ç–æ–≥–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞
        
        Args:
            prompt: –¢–µ–∫—Å—Ç–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç
            max_retries: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
            
        Returns:
            –¢–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç –æ—Ç LLM
        """
        messages = [
            {"role": "user", "text": prompt}
        ]
        return self._make_request(messages, max_retries)
    
    def _extract_json_with_retries(self, text: str, max_retries: int = 3) -> Dict[str, Any]:
        """
        –ü—ã—Ç–∞–µ—Ç—Å—è –∏–∑–≤–ª–µ—á—å JSON —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏, –≤–∫–ª—é—á–∞—è –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∫ LLM
        
        Args:
            text: –¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
            max_retries: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
            
        Returns:
            –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π JSON –∏–ª–∏ –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å
        """

        result = self._extract_json(text)
        if result:
            return result
            

        for attempt in range(max_retries):
            try:
                print(f"üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ #{attempt + 1} –ø–æ–ª—É—á–µ–Ω–∏—è JSON")
                

                repair_prompt = f"""–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–ª–µ–¥—É—é—â–∏–π —Ç–µ–∫—Å—Ç –∏ –≤–µ—Ä–Ω–∏ –µ–≥–æ –∫–∞–∫ –≤–∞–ª–∏–¥–Ω—ã–π JSON.
                
                    –¢–ï–ö–°–¢:
                    {text}

                    –í–ê–ñ–ù–´–ï –ü–†–ê–í–ò–õ–ê:
                    1. –í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û –≤–∞–ª–∏–¥–Ω—ã–π JSON, –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
                    2. –í –∫–∞—á–µ—Å—Ç–≤–µ –∫–ª—é—á–µ–π –∏—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ–≤—ã–µ ID –±–µ–∑ –∫–∞–≤—ã—á–µ–∫
                    3. –ù–ï –ò–°–ü–û–õ–¨–ó–£–ô 'SenderId' –∏–ª–∏ 'user' –≤ –∫–ª—é—á–∞—Ö
                    4. –í—Å–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å—Ç—Ä–æ–∫–∞–º–∏ –≤ –¥–≤–æ–π–Ω—ã—Ö –∫–∞–≤—ã—á–∫–∞—Ö
                    5. –ß–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ù–ï –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ –∫–∞–≤—ã—á–∫–∞—Ö

                    –ü—Ä–∏–º–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞:
                    {{"123": 5, "456": {"type": "secure", "confidence": 70}}}

                    –ü—Ä–∏–º–µ—Ä –ù–ï–ü–†–ê–í–ò–õ–¨–ù–û–ì–û —Ñ–æ—Ä–º–∞—Ç–∞:
                    {{"SenderId_123": 5, "user": {"type": "secure", "confidence": "70"}}}

                    –í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π JSON:
                """
                

                new_response = self.get_llm_response(repair_prompt)
                result = self._extract_json(new_response)
                
                if result:
                    print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω JSON –ø–æ—Å–ª–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries})")
                    return result
                    
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–µ –ø–æ–ª—É—á–∏—Ç—å JSON: {e}")
                

            time.sleep(1 + attempt)
            
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–∞–ª–∏–¥–Ω—ã–π JSON –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫")
        return {}

    def _contains_prohibited_content(self, text: str) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–µ–∫—Å—Ç –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        
        Args:
            text: –¢–µ–∫—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            
        Returns:
            True –µ—Å–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç, –∏–Ω–∞—á–µ False
        """

        link_patterns = [
            r'\[.*?\]\(.*?\)',
            r'https?://\S+',
            r'www\.\S+',
            r'ya\.ru',
            r'yandex\.ru',
            r'google\.com',
            r'–≤ –ø–æ–∏—Å–∫–µ',
            r'–≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ',
            r'–ø–æ—Å–º–æ—Ç—Ä–∏—Ç–µ'
        ]
        

        for pattern in link_patterns:
            if re.search(pattern, text, re.IGNORECASE):
                print(f"‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É: {pattern}")
                return True
                
        return False