from typing import List, Dict, Any, Optional
import torch
from transformers import AutoTokenizer, AutoModelForCausalLM
import json
import re

from .llm_interface import LLMInterface
from . import local_prompts

class LocalLLM(LLMInterface):
    def __init__(self, model_name: str = "models/mistral-instruct"):
        print("üîÅ –ó–∞–≥—Ä—É–∂–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –º–æ–¥–µ–ª—å...")
        self.tokenizer = AutoTokenizer.from_pretrained(
            model_name,
            trust_remote_code=True
        )
        self.model = AutoModelForCausalLM.from_pretrained(
            model_name,
            torch_dtype=torch.float16 if torch.cuda.is_available() else torch.float32,
            device_map="auto"
        )
        print("‚úÖ –õ–æ–∫–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞.")

    def _format_chat_history(self, messages: List[Dict[str, Any]]) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞ –≤ —Å—Ç—Ä–æ–∫—É.
        """
        return "\\n".join([f"{m['SenderId']}: {m['MessageText']}" for m in messages])

    def _make_request(self, prompt_text: str, max_retries: int = 3) -> str:
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ –ª–æ–∫–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏.
        """
        inputs = self.tokenizer(prompt_text, return_tensors="pt", return_attention_mask=True).to(self.model.device)

        for attempt in range(max_retries):
            try:
                outputs = self.model.generate(
                    **inputs,
                    max_new_tokens=256, # –ú–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å
                    do_sample=False,    # –î–ª—è –±–æ–ª–µ–µ –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞
                    temperature=0.0,    # –î–ª—è –±–æ–ª–µ–µ –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞
                    eos_token_id=self.tokenizer.eos_token_id
                )
                decoded = self.tokenizer.decode(outputs[0], skip_special_tokens=True).strip()
                
                # –£–¥–∞–ª—è–µ–º —á–∞—Å—Ç—å –ø—Ä–æ–º–ø—Ç–∞ –∏–∑ –æ—Ç–≤–µ—Ç–∞, –µ—Å–ª–∏ –º–æ–¥–µ–ª—å –µ–≥–æ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç
                # –≠—Ç–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω–æ –¥–ª—è instruct-–º–æ–¥–µ–ª–µ–π
                if decoded.startswith(prompt_text):
                    decoded = decoded[len(prompt_text):].strip()
                
                # –ò—â–µ–º –∑–∞–∫—Ä—ã–≤–∞—é—â–∏–π —Ç–µ–≥ [/INST] –∏ –±–µ—Ä–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –Ω–µ–≥–æ
                inst_match = re.search(r"\[/INST\](.*)", decoded, re.DOTALL | re.IGNORECASE)
                if inst_match:
                    decoded = inst_match.group(1).strip()
                    
                return decoded
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞ –ª–æ–∫–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª—å—é (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries}): {e}")
                if attempt == max_retries - 1:
                    return ""
        return ""

    def _clean_markdown_and_extract_json(self, text: str) -> Optional[Dict[str, Any]]:
        """
        –û—á–∏—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –æ—Ç Markdown –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç JSON.
        """
        if not text:
            print("‚ùå –ü—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è JSON")
            return None

        # –£–¥–∞–ª—è–µ–º ```json ... ``` –∏ ``` ... ```
        cleaned_text = re.sub(r'```(?:json|)\\n?(.*?)\\n?```', r'\\1', text, flags=re.DOTALL)
        cleaned_text = re.sub(r'`(?!`)(.*?)`', r'\\1', cleaned_text) # –û–¥–∏–Ω–æ—á–Ω—ã–µ —Ç–∏–∫–∏, –Ω–µ –¥–≤–æ–π–Ω—ã–µ

        # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ JSON –æ–±—ä–µ–∫—Ç –≤ —Ç–µ–∫—Å—Ç–µ
        # –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º —Å–∞–º—ã–π –≤–Ω–µ—à–Ω–∏–π JSON –æ–±—ä–µ–∫—Ç
        match = re.search(r'{\s*".*?":.*?}', cleaned_text, re.DOTALL)
        if not match:
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, –ø–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –±–µ–∑ —Å—Ç—Ä–æ–≥–æ–≥–æ –Ω–∞—á–∞–ª–∞/–∫–æ–Ω—Ü–∞ —Å—Ç—Ä–æ–∫–∏, –Ω–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–µ—Ñ–∏–∫—Å/—Å—É—Ñ—Ñ–∏–∫—Å
            match = re.search(r'({.*?})', cleaned_text, re.DOTALL)

        if match:
            json_text = match.group(0)
            try:
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø–µ—Ä–µ–¥ –ø–∞—Ä—Å–∏–Ω–≥–æ–º
                # –£–±–∏—Ä–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –≤ —Å—Ç–∏–ª–µ Python/JavaScript, –µ—Å–ª–∏ –æ–Ω–∏ –ø–æ–ø–∞–ª–∏ –≤ —Å—Ç—Ä–æ–∫—É
                json_text = re.sub(r'//.*?\\n', '\\n', json_text)
                json_text = re.sub(r'#.*?\\n', '\\n', json_text)
                
                # –£–±–∏—Ä–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ —É–ø—Ä–∞–≤–ª—è—é—â–∏–µ —Å–∏–º–≤–æ–ª—ã –≤ –Ω–∞—á–∞–ª–µ/–∫–æ–Ω—Ü–µ, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –º–µ—à–∞—Ç—å
                json_text = json_text.strip().strip(',').strip()

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∫–∞–≤—ã—á–µ–∫ —É –∫–ª—é—á–µ–π –∏ —Å—Ç—Ä–æ–∫–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
                # –≠—Ç–æ –æ—á–µ–Ω—å —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞, –Ω–æ –º–æ–∂–µ—Ç –ø–æ–º–æ—á—å –≤ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Å–ª—É—á–∞—è—Ö
                json_text = re.sub(r'(?<![\\])"\s*([a-zA-Z0-9_]+)\s*":', r'"\\1":', json_text) # –ö–ª—é—á–∏
                
                data = json.loads(json_text)
                return data
            except json.JSONDecodeError as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON –∏–∑ —Ç–µ–∫—Å—Ç–∞: {json_text}. –û—à–∏–±–∫–∞: {e}")
                # –ü–æ–ø—ã—Ç–∫–∞ –∏—Å–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä, –æ–¥–∏–Ω–∞—Ä–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏ –≤–º–µ—Å—Ç–æ –¥–≤–æ–π–Ω—ã—Ö
                try:
                    corrected_json_text = json_text.replace("'", '"')
                    # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è —Å–ª—É—á–∞–µ–≤, –∫–æ–≥–¥–∞ —á–∏—Å–ª–æ–≤—ã–µ –∫–ª—é—á–∏ –±–µ–∑ –∫–∞–≤—ã—á–µ–∫
                    corrected_json_text = re.sub(r'([{,]\s*)(\d+)(\s*:)', r'\\1"\\2"\\3', corrected_json_text)
                    data = json.loads(corrected_json_text)
                    print("‚úÖ JSON —É—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–≤—ã—á–µ–∫/—á–∏—Å–ª–æ–≤—ã—Ö –∫–ª—é—á–µ–π.")
                    return data
                except json.JSONDecodeError:
                    print(f"‚ùå –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {corrected_json_text}")
                    return None
        else:
            print(f"‚ùå JSON –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–µ–∫—Å—Ç–µ: {cleaned_text[:200]}...")
            return None

    def count_compliments(self, messages: List[Dict[str, Any]], max_retries: int = 3) -> Optional[Dict[str, Any]]:
        chat_text = self._format_chat_history(messages)
        prompt = local_prompts.compliments_prompt(chat_text)
        response_text = self._make_request(prompt, max_retries)
        return self._clean_markdown_and_extract_json(response_text)

    def calculate_engagement(self, messages: List[Dict[str, Any]], historical_summary: str, max_retries: int = 3) -> Optional[Dict[str, Any]]:
        chat_text = self._format_chat_history(messages)
        user_ids = list(set(m['SenderId'] for m in messages)) # –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ ID
        prompt = local_prompts.engagement_prompt(chat_text, user_ids, historical_summary)
        response_text = self._make_request(prompt, max_retries)
        return self._clean_markdown_and_extract_json(response_text)

    def calculate_attachment(self, messages: List[Dict[str, Any]], historical_summary: str, max_retries: int = 3) -> Optional[Dict[str, Any]]:
        chat_text = self._format_chat_history(messages)
        user_ids = list(set(m['SenderId'] for m in messages))
        prompt = local_prompts.attachment_prompt(chat_text, user_ids, historical_summary)
        response_text = self._make_request(prompt, max_retries)
        return self._clean_markdown_and_extract_json(response_text)

    def generate_recommendations(self, messages: List[Dict[str, Any]], historical_summary: str, user_id: str, max_retries: int = 3) -> Optional[str]:
        chat_text = self._format_chat_history(messages)
        prompt = local_prompts.recommendations_prompt(chat_text, historical_summary, user_id)
        response_text = self._make_request(prompt, max_retries)
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ - —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç, –Ω–µ JSON
        return response_text if response_text else None

    def update_summary(self, messages: List[Dict[str, Any]], historical_summary: Optional[str] = None, max_retries: int = 3) -> Optional[str]:
        chat_text = self._format_chat_history(messages)
        prompt = local_prompts.summary_prompt(chat_text, historical_summary)
        response_text = self._make_request(prompt, max_retries)
        # –°–∞–º–º–µ—Ä–∏ - —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç, –Ω–µ JSON
        return response_text if response_text else None 